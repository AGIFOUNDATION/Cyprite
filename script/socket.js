var webSocket,lastWSURL;globalThis.DefaultSendMessage=async(e,a,o,n)=>{if(!webSocket||!webSocket.send){let a=!!lastWSURL;if(a)try{a=await prepareWS(lastWSURL)}catch(e){console.error(e),a=!1}if(!a)return}a={event:e,data:a,sender:o,sid:n},a=JSON.stringify(a),webSocket.send(a)},globalThis.sendMessage=DefaultSendMessage;let parseMsg=e=>{e=e.data;if(!isString(e))return null;try{e=JSON.parse(e)}catch{return null}return e.target=e.target||"BackEnd",e},ServerHandler=(globalThis.updateAIModelList=()=>{var e,a=!1;for(e in ModelList.splice(0),myInfo.apiKey)myInfo.apiKey[e]&&(a=!0,AI2Model[e])&&ModelList.push(...AI2Model[e]);myInfo.edgeAvailable=a,console.log("~~~~~~~~>",myInfo)},globalThis.getWSConfig=async()=>{var[e,a]=await Promise.all([chrome.storage.local.get(["wsHost","apiKey","AImodel"]),chrome.storage.sync.get(["name","info","lang"])]),o=(logger.em("EXT","Config Loaded"),[]);return myInfo.inited=!0,myInfo.name=a.name||myInfo.name,myInfo.info=a.info||myInfo.info,myInfo.lang=a.lang,myInfo.lang&&(myInfo.lang=myInfo.lang.toLowerCase(),i18nList.includes(myInfo.lang))||(myInfo.lang=DefaultLang),myInfo.lang!==a.lang&&o.push(chrome.storage.sync.set({lang:myInfo.lang})),myInfo.apiKey=e.apiKey||{},isString(myInfo.apiKey)&&(a={},myInfo.apiKey&&(a.gemini=myInfo.apiKey),myInfo.apiKey=a,o.push(chrome.storage.local.set({apiKey:myInfo.apiKey}))),myInfo.useLocalKV=!ForceBackend&&!e.wsHost,myInfo.model=e.AImodel||myInfo.model||ModelList[0],updateAIModelList(),logger.em("EXT",myInfo),0<o.length&&await Promise.all(o),e.wsHost},globalThis.initWS=async()=>{var e=await getWSConfig();if(await checkAvailability())if(myInfo.useLocalKV)logger.info("WS","Use Edged Knowledge Vault"),((await chrome.storage.local.get("installed")).installed||!1)&&AIHandler.sayHello();else{logger.info("WS","Host: "+e);try{await prepareWS(e)}catch{}}},globalThis.prepareWS=l=>new Promise(e=>{lastWSURL=l,webSocket&&webSocket.close();var a=new WebSocket(l);a.onopen=async()=>{logger.info("WS","Opened"),webSocket=a,globalThis.sendMessage=async(e,a,o,n)=>{if(!webSocket||!webSocket.send){let a;try{a=await prepareWS(l)}catch(e){console.error(e),a=!1}if(!a)throw new Error("AIServerNotReady")}a={event:e,data:a,sender:o,sid:n},a=JSON.stringify(a),webSocket.send(a)},e(!0),!(await chrome.storage.local.get("installed")).installed&&1||AIHandler.sayHello()},a.onmessage=e=>{e=parseMsg(e);"initial"===e.event?logger.info("WS","Initialized: "+e.data):(e.sender="ServerEnd",dispatchEvent(e))},a.onerror=e=>{logger.error("WS","Error:",e)},a.onclose=()=>{logger.info("WS","Close"),a===webSocket&&(webSocket=null),globalThis.sendMessage=DefaultSendMessage,e(!1)}}),{});globalThis.callServer=(n,l,r,t)=>new Promise(async(e,a)=>{for(var o=newID();ServerHandler[o];)o=newID();ServerHandler[o]=[e,a];try{await sendMessage(n,{taskId:o,data:l},r||"BackEnd",t)}catch(e){a(e),delete ServerHandler[o]}}),globalThis.getReplyFromServer=(e,a,o)=>{var n=ServerHandler[e];n?o?n[1](o):n[0](a):logger.error("Server","No Handler for task "+e)};